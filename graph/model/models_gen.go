// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type PayrollInput struct {
	UserID      int      `json:"userId"`
	Country     Country  `json:"country"`
	GrossSalary float64  `json:"grossSalary"`
	Year        int      `json:"year"`
	Month       int      `json:"month"`
	Bonus       *float64 `json:"bonus"`
}

type PayrollSummary struct {
	Gross float64     `json:"gross"`
	Net   float64     `json:"net"`
	Bonus *float64    `json:"bonus"`
	Taxes []*Tax      `json:"taxes"`
	User  *User       `json:"user"`
	Type  PayrollType `json:"type"`
}

type Tax struct {
	Name  string  `json:"name"`
	Value float64 `json:"value"`
}

type User struct {
	FirstName         string `json:"firstName"`
	LastName          string `json:"lastName"`
	ProfilePictureURL string `json:"profilePictureUrl"`
}

type Country string

const (
	CountryFrance Country = "FRANCE"
	CountryItaly  Country = "ITALY"
)

var AllCountry = []Country{
	CountryFrance,
	CountryItaly,
}

func (e Country) IsValid() bool {
	switch e {
	case CountryFrance, CountryItaly:
		return true
	}
	return false
}

func (e Country) String() string {
	return string(e)
}

func (e *Country) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Country(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Country", str)
	}
	return nil
}

func (e Country) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type PayrollType string

const (
	PayrollTypeReal          PayrollType = "REAL"
	PayrollTypeFuturePreview PayrollType = "FUTURE_PREVIEW"
)

var AllPayrollType = []PayrollType{
	PayrollTypeReal,
	PayrollTypeFuturePreview,
}

func (e PayrollType) IsValid() bool {
	switch e {
	case PayrollTypeReal, PayrollTypeFuturePreview:
		return true
	}
	return false
}

func (e PayrollType) String() string {
	return string(e)
}

func (e *PayrollType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PayrollType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PayrollType", str)
	}
	return nil
}

func (e PayrollType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
