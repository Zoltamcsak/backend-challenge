// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type PayrollSummary struct {
	Gross float64  `json:"gross"`
	Net   float64  `json:"net"`
	Bonus *float64 `json:"bonus"`
	User  *User    `json:"user"`
}

type User struct {
	FirstName string `json:"firstName"`
	LastName  string `json:"lastName"`
}

type Country string

const (
	CountryFrance Country = "FRANCE"
	CountryItaly  Country = "ITALY"
)

var AllCountry = []Country{
	CountryFrance,
	CountryItaly,
}

func (e Country) IsValid() bool {
	switch e {
	case CountryFrance, CountryItaly:
		return true
	}
	return false
}

func (e Country) String() string {
	return string(e)
}

func (e *Country) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Country(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Country", str)
	}
	return nil
}

func (e Country) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
